function isCompatible(ua) { return !!((function () { 'use strict'; return !this && Function.prototype.bind; }()) && 'querySelector' in document && 'localStorage' in window && !ua.match(/MSIE 10|NetFront|Opera Mini|S40OviBrowser|MeeGo|Android.+Glass|^Mozilla\/5\.0 .+ Gecko\/$|googleweblight|PLAYSTATION|PlayStation/)); } if (!isCompatible(navigator.userAgent)) { document.documentElement.className = document.documentElement.className.replace(/(^|\s)client-js(\s|$)/, '$1client-nojs$2'); while (window.NORLQ && NORLQ[0]) { NORLQ.shift()(); } NORLQ = { push: function (fn) { fn(); } }; RLQ = { push: function () { } }; } else {
    if (window.performance && performance.mark) { performance.mark('mwStartup'); } (function () {
        'use strict'; var mw, log, con = window.console; function logError(topic, data) { var msg, e = data.exception; if (con.log) { msg = (e ? 'Exception' : 'Error') + ' in ' + data.source + (data.module ? ' in module ' + data.module : '') + (e ? ':' : '.'); con.log(msg); if (e && con.warn) { con.warn(e); } } } function Map() { this.values = Object.create(null); } Map.prototype = {
            constructor: Map, get:
                function (selection, fallback) { var results, i; fallback = arguments.length > 1 ? fallback : null; if (Array.isArray(selection)) { results = {}; for (i = 0; i < selection.length; i++) { if (typeof selection[i] === 'string') { results[selection[i]] = selection[i] in this.values ? this.values[selection[i]] : fallback; } } return results; } if (typeof selection === 'string') { return selection in this.values ? this.values[selection] : fallback; } if (selection === undefined) { results = {}; for (i in this.values) { results[i] = this.values[i]; } return results; } return fallback; }, set: function (selection, value) { if (arguments.length > 1) { if (typeof selection === 'string') { this.values[selection] = value; return true; } } else if (typeof selection === 'object') { for (var s in selection) { this.values[s] = selection[s]; } return true; } return false; }, exists: function (selection) { return typeof selection === 'string' && selection in this.values; }
        }; log = function () { }; log.warn = con.warn ? Function.prototype.bind.call(con.warn, con) : function () { }; mw = {
            now: function () {
                var perf = window.performance, navStart = perf
                    && perf.timing && perf.timing.navigationStart; mw.now = navStart && perf.now ? function () { return navStart + perf.now(); } : Date.now; return mw.now();
            }, trackQueue: [], track: function (topic, data) { mw.trackQueue.push({ topic: topic, data: data }); }, trackError: function (topic, data) { mw.track(topic, data); logError(topic, data); }, Map: Map, config: new Map(), messages: new Map(), templates: new Map(), log: log
        }; window.mw = window.mediaWiki = mw;
    }()); (function () {
        'use strict'; var StringSet, store, hasOwn = Object.hasOwnProperty; function defineFallbacks() { StringSet = window.Set || function () { var set = Object.create(null); return { add: function (value) { set[value] = true; }, has: function (value) { return value in set; } }; }; } defineFallbacks(); function fnv132(str) { var hash = 0x811C9DC5; for (var i = 0; i < str.length; i++) { hash += (hash << 1) + (hash << 4) + (hash << 7) + (hash << 8) + (hash << 24); hash ^= str.charCodeAt(i); } hash = (hash >>> 0).toString(36).slice(0, 5); while (hash.length < 5) { hash = '0' + hash; } return hash; } var isES6Supported = typeof Promise === 'function' && Promise.prototype.finally && /./g.
            flags === 'g' && (function () { try { new Function('(a = 0) => a'); return true; } catch (e) { return false; } }()); var registry = Object.create(null), sources = Object.create(null), handlingPendingRequests = false, pendingRequests = [], queue = [], jobs = [], willPropagate = false, errorModules = [], baseModules = ["jquery", "mediawiki.base"], marker = document.querySelector('meta[name="ResourceLoaderDynamicStyles"]'), lastCssBuffer, rAF = window.requestAnimationFrame || setTimeout; function newStyleTag(text, nextNode) { var el = document.createElement('style'); el.appendChild(document.createTextNode(text)); if (nextNode && nextNode.parentNode) { nextNode.parentNode.insertBefore(el, nextNode); } else { document.head.appendChild(el); } return el; } function flushCssBuffer(cssBuffer) { if (cssBuffer === lastCssBuffer) { lastCssBuffer = null; } newStyleTag(cssBuffer.cssText, marker); for (var i = 0; i < cssBuffer.callbacks.length; i++) { cssBuffer.callbacks[i](); } } function addEmbeddedCSS(cssText, callback) {
                if (!lastCssBuffer || cssText.slice(0, 7) === '@import') {
                    lastCssBuffer = {
                        cssText: '',
                        callbacks: []
                    }; rAF(flushCssBuffer.bind(null, lastCssBuffer));
                } lastCssBuffer.cssText += '\n' + cssText; lastCssBuffer.callbacks.push(callback);
            } function getCombinedVersion(modules) { var hashes = modules.reduce(function (result, module) { return result + registry[module].version; }, ''); return fnv132(hashes); } function allReady(modules) { for (var i = 0; i < modules.length; i++) { if (mw.loader.getState(modules[i]) !== 'ready') { return false; } } return true; } function allWithImplicitReady(module) { return allReady(registry[module].dependencies) && (baseModules.indexOf(module) !== -1 || allReady(baseModules)); } function anyFailed(modules) { for (var i = 0; i < modules.length; i++) { var state = mw.loader.getState(modules[i]); if (state === 'error' || state === 'missing') { return modules[i]; } } return false; } function doPropagation() {
                var didPropagate = true; var module; while (didPropagate) {
                    didPropagate = false; while (errorModules.length) {
                        var errorModule = errorModules.shift(), baseModuleError = baseModules.indexOf(errorModule) !== -1; for (module in registry) {
                            if (registry[
                                module].state !== 'error' && registry[module].state !== 'missing') { if (baseModuleError && baseModules.indexOf(module) === -1) { registry[module].state = 'error'; didPropagate = true; } else if (registry[module].dependencies.indexOf(errorModule) !== -1) { registry[module].state = 'error'; errorModules.push(module); didPropagate = true; } }
                        }
                    } for (module in registry) { if (registry[module].state === 'loaded' && allWithImplicitReady(module)) { execute(module); didPropagate = true; } } for (var i = 0; i < jobs.length; i++) { var job = jobs[i]; var failed = anyFailed(job.dependencies); if (failed !== false || allReady(job.dependencies)) { jobs.splice(i, 1); i -= 1; try { if (failed !== false && job.error) { job.error(new Error('Failed dependency: ' + failed), job.dependencies); } else if (failed === false && job.ready) { job.ready(); } } catch (e) { mw.trackError('resourceloader.exception', { exception: e, source: 'load-callback' }); } didPropagate = true; } }
                } willPropagate = false;
            } function setAndPropagate(module, state) {
                registry[module].state = state; if (state === 'ready') { store.add(module); } else if (state ===
                    'error' || state === 'missing') { errorModules.push(module); } else if (state !== 'loaded') { return; } if (willPropagate) { return; } willPropagate = true; mw.requestIdleCallback(doPropagation, { timeout: 1 });
            } function sortDependencies(module, resolved, unresolved) { if (!(module in registry)) { throw new Error('Unknown module: ' + module); } if (typeof registry[module].skip === 'string') { var skip = (new Function(registry[module].skip)()); registry[module].skip = !!skip; if (skip) { registry[module].dependencies = []; setAndPropagate(module, 'ready'); return; } } if (!unresolved) { unresolved = new StringSet(); } var deps = registry[module].dependencies; unresolved.add(module); for (var i = 0; i < deps.length; i++) { if (resolved.indexOf(deps[i]) === -1) { if (unresolved.has(deps[i])) { throw new Error('Circular reference detected: ' + module + ' -> ' + deps[i]); } sortDependencies(deps[i], resolved, unresolved); } } resolved.push(module); } function resolve(modules) {
                var resolved = baseModules.slice(); for (var i = 0; i < modules.length; i++) { sortDependencies(modules[i], resolved); } return resolved
                    ;
            } function resolveStubbornly(modules) { var resolved = baseModules.slice(); for (var i = 0; i < modules.length; i++) { var saved = resolved.slice(); try { sortDependencies(modules[i], resolved); } catch (err) { resolved = saved; mw.log.warn('Skipped unavailable module ' + modules[i]); if (modules[i] in registry) { mw.trackError('resourceloader.exception', { exception: err, source: 'resolve' }); } } } return resolved; } function resolveRelativePath(relativePath, basePath) { var relParts = relativePath.match(/^((?:\.\.?\/)+)(.*)$/); if (!relParts) { return null; } var baseDirParts = basePath.split('/'); baseDirParts.pop(); var prefixes = relParts[1].split('/'); prefixes.pop(); var prefix; while ((prefix = prefixes.pop()) !== undefined) { if (prefix === '..') { baseDirParts.pop(); } } return (baseDirParts.length ? baseDirParts.join('/') + '/' : '') + relParts[2]; } function makeRequireFunction(moduleObj, basePath) {
                return function require(moduleName) {
                    var fileName = resolveRelativePath(moduleName, basePath); if (fileName === null) { return mw.loader.require(moduleName); } if (hasOwn.call(
                        moduleObj.packageExports, fileName)) { return moduleObj.packageExports[fileName]; } var scriptFiles = moduleObj.script.files; if (!hasOwn.call(scriptFiles, fileName)) { throw new Error('Cannot require undefined file ' + fileName); } var result, fileContent = scriptFiles[fileName]; if (typeof fileContent === 'function') { var moduleParam = { exports: {} }; fileContent(makeRequireFunction(moduleObj, fileName), moduleParam, moduleParam.exports); result = moduleParam.exports; } else { result = fileContent; } moduleObj.packageExports[fileName] = result; return result;
                };
            } function addScript(src, callback) { var script = document.createElement('script'); script.src = src; script.onload = script.onerror = function () { if (script.parentNode) { script.parentNode.removeChild(script); } if (callback) { callback(); callback = null; } }; document.head.appendChild(script); } function queueModuleScript(src, moduleName, callback) {
                pendingRequests.push(function () {
                    if (moduleName !== 'jquery') { window.require = mw.loader.require; window.module = registry[moduleName].module; } addScript(src,
                        function () { delete window.module; callback(); if (pendingRequests[0]) { pendingRequests.shift()(); } else { handlingPendingRequests = false; } });
                }); if (!handlingPendingRequests && pendingRequests[0]) { handlingPendingRequests = true; pendingRequests.shift()(); }
            } function addLink(url, media, nextNode) { var el = document.createElement('link'); el.rel = 'stylesheet'; if (media) { el.media = media; } el.href = url; if (nextNode && nextNode.parentNode) { nextNode.parentNode.insertBefore(el, nextNode); } else { document.head.appendChild(el); } } function domEval(code) { var script = document.createElement('script'); if (mw.config.get('wgCSPNonce') !== false) { script.nonce = mw.config.get('wgCSPNonce'); } script.text = code; document.head.appendChild(script); script.parentNode.removeChild(script); } function enqueue(dependencies, ready, error) {
                if (allReady(dependencies)) { if (ready) { ready(); } return; } var failed = anyFailed(dependencies); if (failed !== false) { if (error) { error(new Error('Dependency ' + failed + ' failed to load'), dependencies); } return; } if (ready || error) {
                    jobs.push({
                        dependencies: dependencies.filter(function (module) { var state = registry[module].state; return state === 'registered' || state === 'loaded' || state === 'loading' || state === 'executing'; }), ready: ready, error: error
                    });
                } dependencies.forEach(function (module) { if (registry[module].state === 'registered' && queue.indexOf(module) === -1) { queue.push(module); } }); mw.loader.work();
            } function execute(module) {
                if (registry[module].state !== 'loaded') { throw new Error('Module in state "' + registry[module].state + '" may not execute: ' + module); } registry[module].state = 'executing'; var runScript = function () {
                    var script = registry[module].script; var markModuleReady = function () { setAndPropagate(module, 'ready'); }; var nestedAddScript = function (arr, offset) { if (offset >= arr.length) { markModuleReady(); return; } queueModuleScript(arr[offset], module, function () { nestedAddScript(arr, offset + 1); }); }; try {
                        if (Array.isArray(script)) { nestedAddScript(script, 0); } else if (typeof script === 'function') {
                            if (module === 'jquery') { script(); } else {
                                script(window.$, window.$, mw.loader.
                                    require, registry[module].module);
                            } markModuleReady();
                        } else if (typeof script === 'object' && script !== null) { var mainScript = script.files[script.main]; if (typeof mainScript !== 'function') { throw new Error('Main file in module ' + module + ' must be a function'); } mainScript(makeRequireFunction(registry[module], script.main), registry[module].module, registry[module].module.exports); markModuleReady(); } else if (typeof script === 'string') { domEval(script); markModuleReady(); } else { markModuleReady(); }
                    } catch (e) { setAndPropagate(module, 'error'); mw.trackError('resourceloader.exception', { exception: e, module: module, source: 'module-execute' }); }
                }; if (registry[module].messages) { mw.messages.set(registry[module].messages); } if (registry[module].templates) { mw.templates.set(module, registry[module].templates); } var cssPending = 0; var cssHandle = function () { cssPending++; return function () { cssPending--; if (cssPending === 0) { var runScriptCopy = runScript; runScript = undefined; runScriptCopy(); } }; }; if (registry[module].style) {
                    for (var key in registry[
                        module].style) { var value = registry[module].style[key]; if (key === 'css') { for (var i = 0; i < value.length; i++) { addEmbeddedCSS(value[i], cssHandle()); } } else if (key === 'url') { for (var media in value) { var urls = value[media]; for (var j = 0; j < urls.length; j++) { addLink(urls[j], media, marker); } } } }
                } if (module === 'user') { var siteDeps; var siteDepErr; try { siteDeps = resolve(['site']); } catch (e) { siteDepErr = e; runScript(); } if (!siteDepErr) { enqueue(siteDeps, runScript, runScript); } } else if (cssPending === 0) { runScript(); }
            } function sortQuery(o) { var sorted = {}; var list = []; for (var key in o) { list.push(key); } list.sort(); for (var i = 0; i < list.length; i++) { sorted[list[i]] = o[list[i]]; } return sorted; } function buildModulesString(moduleMap) { var str = []; var list = []; var p; function restore(suffix) { return p + suffix; } for (var prefix in moduleMap) { p = prefix === '' ? '' : prefix + '.'; str.push(p + moduleMap[prefix].join(',')); list.push.apply(list, moduleMap[prefix].map(restore)); } return { str: str.join('|'), list: list }; } function makeQueryString(params) {
                var chunks = []; for (
                    var key in params) { chunks.push(encodeURIComponent(key) + '=' + encodeURIComponent(params[key])); } return chunks.join('&');
            } function batchRequest(batch) {
                if (!batch.length) { return; } var sourceLoadScript, currReqBase, moduleMap; function doRequest() { var query = Object.create(currReqBase), packed = buildModulesString(moduleMap); query.modules = packed.str; query.version = getCombinedVersion(packed.list); query = sortQuery(query); addScript(sourceLoadScript + '?' + makeQueryString(query)); } batch.sort(); var reqBase = { "lang": "en", "skin": "minerva" }; var splits = Object.create(null); for (var b = 0; b < batch.length; b++) { var bSource = registry[batch[b]].source; var bGroup = registry[batch[b]].group; if (!splits[bSource]) { splits[bSource] = Object.create(null); } if (!splits[bSource][bGroup]) { splits[bSource][bGroup] = []; } splits[bSource][bGroup].push(batch[b]); } for (var source in splits) {
                    sourceLoadScript = sources[source]; for (var group in splits[source]) {
                        var modules = splits[source][group]; currReqBase = Object.create(reqBase); if (group === 0 && mw.config.get(
                            'wgUserName') !== null) { currReqBase.user = mw.config.get('wgUserName'); } var currReqBaseLength = makeQueryString(currReqBase).length + 23; var length = currReqBaseLength; var currReqModules = []; moduleMap = Object.create(null); for (var i = 0; i < modules.length; i++) { var lastDotIndex = modules[i].lastIndexOf('.'), prefix = modules[i].slice(0, Math.max(0, lastDotIndex)), suffix = modules[i].slice(lastDotIndex + 1), bytesAdded = moduleMap[prefix] ? suffix.length + 3 : modules[i].length + 3; if (currReqModules.length && length + bytesAdded > mw.loader.maxQueryLength) { doRequest(); length = currReqBaseLength; moduleMap = Object.create(null); currReqModules = []; } if (!moduleMap[prefix]) { moduleMap[prefix] = []; } length += bytesAdded; moduleMap[prefix].push(suffix); currReqModules.push(modules[i]); } if (currReqModules.length) { doRequest(); }
                    }
                }
            } function asyncEval(implementations, cb) { if (!implementations.length) { return; } mw.requestIdleCallback(function () { try { domEval(implementations.join(';')); } catch (err) { cb(err); } }); } function getModuleKey(module) {
                return module in registry
                    ? (module + '@' + registry[module].version) : null;
            } function splitModuleKey(key) { var index = key.lastIndexOf('@'); if (index === -1 || index === 0) { return { name: key, version: '' }; } return { name: key.slice(0, index), version: key.slice(index + 1) }; } function registerOne(module, version, dependencies, group, source, skip) { if (module in registry) { throw new Error('module already registered: ' + module); } version = String(version || ''); if (version.slice(-1) === '!') { if (!isES6Supported) { return; } version = version.slice(0, -1); } registry[module] = { module: { exports: {} }, packageExports: {}, version: version, dependencies: dependencies || [], group: typeof group === 'undefined' ? null : group, source: typeof source === 'string' ? source : 'local', state: 'registered', skip: typeof skip === 'string' ? skip : null }; } mw.loader = {
                moduleRegistry: registry, maxQueryLength: 5000, addStyleTag: newStyleTag, enqueue: enqueue, resolve: resolve, work: function () {
                    store.init(); var q = queue.length, storedImplementations = [], storedNames = [], requestNames = [], batch = new StringSet(); while (q--) {
                        var module = queue[q];
                        if (mw.loader.getState(module) === 'registered' && !batch.has(module)) { registry[module].state = 'loading'; batch.add(module); var implementation = store.get(module); if (implementation) { storedImplementations.push(implementation); storedNames.push(module); } else { requestNames.push(module); } }
                    } queue = []; asyncEval(storedImplementations, function (err) { store.stats.failed++; store.clear(); mw.trackError('resourceloader.exception', { exception: err, source: 'store-eval' }); var failed = storedNames.filter(function (name) { return registry[name].state === 'loading'; }); batchRequest(failed); }); batchRequest(requestNames);
                }, addSource: function (ids) { for (var id in ids) { if (id in sources) { throw new Error('source already registered: ' + id); } sources[id] = ids[id]; } }, register: function (modules) {
                    if (typeof modules !== 'object') { registerOne.apply(null, arguments); return; } function resolveIndex(dep) { return typeof dep === 'number' ? modules[dep][0] : dep; } for (var i = 0; i < modules.length; i++) {
                        var deps = modules[i][2]; if (deps) {
                            for (var j = 0; j < deps.length; j++) {
                                deps[j]
                                = resolveIndex(deps[j]);
                            }
                        } registerOne.apply(null, modules[i]);
                    }
                }, implement: function (module, script, style, messages, templates) { var split = splitModuleKey(module), name = split.name, version = split.version; if (!(name in registry)) { mw.loader.register(name); } if (registry[name].script !== undefined) { throw new Error('module already implemented: ' + name); } if (version) { registry[name].version = version; } registry[name].script = script || null; registry[name].style = style || null; registry[name].messages = messages || null; registry[name].templates = templates || null; if (registry[name].state !== 'error' && registry[name].state !== 'missing') { setAndPropagate(name, 'loaded'); } }, load: function (modules, type) { if (typeof modules === 'string' && /^(https?:)?\/?\//.test(modules)) { if (type === 'text/css') { addLink(modules); } else if (type === 'text/javascript' || type === undefined) { addScript(modules); } else { throw new Error('Invalid type ' + type); } } else { modules = typeof modules === 'string' ? [modules] : modules; enqueue(resolveStubbornly(modules)); } }, state: function (states) {
                    for (var module in states) { if (!(module in registry)) { mw.loader.register(module); } setAndPropagate(module, states[module]); }
                }, getState: function (module) { return module in registry ? registry[module].state : null; }, require: function (moduleName) { if (mw.loader.getState(moduleName) !== 'ready') { throw new Error('Module "' + moduleName + '" is not loaded'); } return registry[moduleName].module.exports; }
            }; var hasPendingWrites = false; function flushWrites() { store.prune(); while (store.queue.length) { store.set(store.queue.shift()); } try { localStorage.removeItem(store.key); var data = JSON.stringify(store); localStorage.setItem(store.key, data); } catch (e) { mw.trackError('resourceloader.exception', { exception: e, source: 'store-localstorage-update' }); } hasPendingWrites = false; } mw.loader.store = store = {
                enabled: null, items: {}, queue: [], stats: { hits: 0, misses: 0, expired: 0, failed: 0 }, toJSON: function () { return { items: store.items, vary: store.vary, asOf: Math.ceil(Date.now() / 1e7) }; }, key: "MediaWikiModuleStore:enwiki", vary: "minerva:1-3:en", init: function () {
                    if (this.enabled === null) { this.enabled = false; if (true) { this.load(); } else { this.clear(); } }
                }, load: function () { try { var raw = localStorage.getItem(this.key); this.enabled = true; var data = JSON.parse(raw); if (data && data.vary === this.vary && data.items && Date.now() < (data.asOf * 1e7) + 259e7) { this.items = data.items; } } catch (e) { } }, get: function (module) { if (this.enabled) { var key = getModuleKey(module); if (key in this.items) { this.stats.hits++; return this.items[key]; } this.stats.misses++; } return false; }, add: function (module) { if (this.enabled) { this.queue.push(module); this.requestUpdate(); } }, set: function (module) {
                    var args, encodedScript, descriptor = registry[module], key = getModuleKey(module); if (key in this.items || !descriptor || descriptor.state !== 'ready' || !descriptor.version || descriptor.group === 1 || descriptor.group === 0 || [descriptor.script, descriptor.style, descriptor.messages, descriptor.templates].indexOf(undefined) !== -1) { return; } try {
                        if (typeof descriptor.script === 'function') { encodedScript = String(descriptor.script); } else if (typeof
                            descriptor.script === 'object' && descriptor.script && !Array.isArray(descriptor.script)) { encodedScript = '{' + 'main:' + JSON.stringify(descriptor.script.main) + ',' + 'files:{' + Object.keys(descriptor.script.files).map(function (file) { var value = descriptor.script.files[file]; return JSON.stringify(file) + ':' + (typeof value === 'function' ? value : JSON.stringify(value)); }).join(',') + '}}'; } else { encodedScript = JSON.stringify(descriptor.script); } args = [JSON.stringify(key), encodedScript, JSON.stringify(descriptor.style), JSON.stringify(descriptor.messages), JSON.stringify(descriptor.templates)];
                    } catch (e) { mw.trackError('resourceloader.exception', { exception: e, source: 'store-localstorage-json' }); return; } var src = 'mw.loader.implement(' + args.join(',') + ');'; if (src.length > 1e5) { return; } this.items[key] = src;
                }, prune: function () { for (var key in this.items) { if (getModuleKey(splitModuleKey(key).name) !== key) { this.stats.expired++; delete this.items[key]; } } }, clear: function () { this.items = {}; try { localStorage.removeItem(this.key); } catch (e) { } },
                requestUpdate: function () { if (!hasPendingWrites) { hasPendingWrites = true; setTimeout(function () { mw.requestIdleCallback(flushWrites); }, 2000); } }
            };
    }()); mw.requestIdleCallbackInternal = function (callback) { setTimeout(function () { var start = mw.now(); callback({ didTimeout: false, timeRemaining: function () { return Math.max(0, 50 - (mw.now() - start)); } }); }, 1); }; mw.requestIdleCallback = window.requestIdleCallback ? window.requestIdleCallback.bind(window) : mw.requestIdleCallbackInternal; (function () {
        var queue; mw.loader.addSource({ "local": "/w/load.php", "metawiki": "//meta.wikimedia.org/w/load.php" }); mw.loader.register([["site", "xgrs3", [1]], ["site.styles", "36i3g", [], 2], ["user", "s1wiu", [], 0], ["user.styles", "smrj4", [], 0], ["user.options", "1i9g4", [], 1], ["mediawiki.skinning.elements", "1l9u1"], ["mediawiki.skinning.content", "lkgp1"], ["mediawiki.skinning.interface", "1au81"], ["jquery.makeCollapsible.styles", "fridi"], ["mediawiki.skinning.content.parsoid", "1w1s5"], ["mediawiki.skinning.content.externallinks", "t93ca"], ["jquery", "1vnvf"
        ], ["es6-polyfills", "u287e", [], null, null, "return Array.prototype.find\u0026\u0026Array.prototype.findIndex\u0026\u0026Array.prototype.includes\u0026\u0026typeof Promise==='function'\u0026\u0026Promise.prototype.finally;"], ["fetch-polyfill", "1gvrd", [14]], ["web2017-polyfills", "giosa", [12], null, null, "return'IntersectionObserver'in window\u0026\u0026typeof fetch==='function'\u0026\u0026typeof URL==='function'\u0026\u0026'toJSON'in URL.prototype;"], ["mediawiki.base", "s2zsc", [11]], ["jquery.client", "1tje2"], ["jquery.confirmable", "1en9n", [89]], ["jquery.cookie", "1u41n"], ["jquery.highlightText", "t130m", [70]], ["jquery.i18n", "31t4a", [88]], ["jquery.lengthLimit", "qrnp1", [60]], ["jquery.makeCollapsible", "13lft", [8]], ["jquery.spinner", "yoa8f", [24]], ["jquery.spinner.styles", "pfek7"], ["jquery.suggestions", "1ykxl", [19]], ["jquery.tablesorter", "ex6te", [27, 90, 70]], ["jquery.tablesorter.styles", "jjsfw"], ["jquery.textSelection", "em3yw", [16]], ["jquery.throttle-debounce", "1bymo"], ["jquery.ui", "12ffh"], ["moment",
            "r6trt", [86, 70]], ["vue", "iiejt!"], ["@vue/composition-api", "1s4l3", [32]], ["vuex", "ironm!", [32]], ["wvui", "46zus", [33]], ["wvui-search", "1rr2l", [32]], ["@wikimedia/codex", "1rm1x!", [32]], ["mediawiki.template", "6nkqm"], ["mediawiki.template.mustache", "gy30q", [38]], ["mediawiki.apipretty", "5bju3"], ["mediawiki.api", "1sdt6", [65, 89]], ["mediawiki.content.json", "1xmtc"], ["mediawiki.confirmCloseWindow", "1m54f"], ["mediawiki.diff.styles", "jiim5"], ["mediawiki.feedback", "nllne", [519, 166]], ["mediawiki.feedlink", "5bck4"], ["mediawiki.ForeignApi", "17f2l", [234]], ["mediawiki.ForeignApi.core", "15s0r", [68, 41, 154]], ["mediawiki.helplink", "5fs9z"], ["mediawiki.hlist", "187fe"], ["mediawiki.htmlform", "18f2c", [21, 70]], ["mediawiki.htmlform.ooui", "moc8u", [158]], ["mediawiki.htmlform.styles", "1x8zm"], ["mediawiki.htmlform.ooui.styles", "ge3zz"], ["mediawiki.icon", "17xlm"], ["mediawiki.inspect", "1w7zb", [60, 70]], ["mediawiki.notification", "3r9uf", [70, 76]], ["mediawiki.notification.convertmessagebox", "zb0xo", [57]], [
            "mediawiki.notification.convertmessagebox.styles", "dro1f"], ["mediawiki.String", "1ck84"], ["mediawiki.pager.styles", "9uw59"], ["mediawiki.pulsatingdot", "svyap"], ["mediawiki.searchSuggest", "xye4v", [25, 41]], ["mediawiki.storage", "1sj4u"], ["mediawiki.Title", "1jojn", [60, 70]], ["mediawiki.toc", "5oex3", [73]], ["mediawiki.toc.styles", "66iwu"], ["mediawiki.Uri", "1n2iu", [70]], ["mediawiki.user", "1ab6a", [41, 73]], ["mediawiki.util", "1cldo", [16]], ["mediawiki.checkboxtoggle", "nzeg7"], ["mediawiki.checkboxtoggle.styles", "1esmp"], ["mediawiki.cookie", "alksl", [18]], ["mediawiki.experiments", "8e8ao"], ["mediawiki.editfont.styles", "bc31w"], ["mediawiki.visibleTimeout", "1bmk6"], ["mediawiki.action.edit", "165e7", [28, 78, 41, 75, 134]], ["mediawiki.action.edit.styles", "1h80q"], ["mediawiki.action.history", "1j8pz", [22]], ["mediawiki.action.history.styles", "qf3oi"], ["mediawiki.action.view.categoryPage.styles", "18sxm"], ["mediawiki.action.view.redirect", "1a3n8", [16]], ["mediawiki.action.view.redirectPage", "1tcmo"], [
            "mediawiki.action.edit.editWarning", "192id", [28, 43, 89]], ["mediawiki.action.styles", "xz1f2"], ["mediawiki.language", "1h2x6", [87]], ["mediawiki.cldr", "1630p", [88]], ["mediawiki.libs.pluralruleparser", "8vy0u"], ["mediawiki.jqueryMsg", "b0ah4", [60, 86, 70, 4]], ["mediawiki.language.months", "1tymc", [86]], ["mediawiki.language.names", "1lz7l", [86]], ["mediawiki.language.specialCharacters", "cv42u", [86]], ["mediawiki.libs.jpegmeta", "16fc5"], ["mediawiki.page.gallery.styles", "19rc4"], ["mediawiki.page.ready", "1ddwb", [41]], ["mediawiki.page.watch.ajax", "l51i1", [41]], ["mediawiki.page.preview", "11ehq", [22, 28, 41, 44, 158]], ["mediawiki.rcfilters.filters.base.styles", "vhvy0"], ["mediawiki.rcfilters.filters.ui", "1pwhh", [22, 68, 69, 129, 167, 174, 176, 177, 178, 180, 181]], ["mediawiki.interface.helpers.styles", "1j78j"], ["mediawiki.special", "1srpv"], ["mediawiki.special.apisandbox", "vkacm", [22, 68, 149, 135, 157, 172]], ["mediawiki.special.block", "3z6jo", [51, 132, 148, 139, 149, 146, 172, 174]], ["mediawiki.misc-authed-ooui", "4897z", [52, 129, 134]]
            , ["mediawiki.misc-authed-curate", "1auv8", [17, 23, 41]], ["mediawiki.special.changeslist", "63peg"], ["mediawiki.special.changeslist.watchlistexpiry", "dgsac", [101]], ["mediawiki.special.changeslist.legend", "1yu7j"], ["mediawiki.special.changeslist.legend.js", "fa4m4", [22, 73]], ["mediawiki.special.contributions", "ua2dg", [22, 89, 132, 157]], ["mediawiki.special.import.styles.ooui", "1xy1m"], ["mediawiki.special.preferences.ooui", "kr0k3", [43, 75, 58, 64, 139, 134]], ["mediawiki.special.preferences.styles.ooui", "399x3"], ["mediawiki.special.recentchanges", "1b2m9", [129]], ["mediawiki.special.revisionDelete", "e8jxp", [21]], ["mediawiki.special.search", "1sevh", [150]], ["mediawiki.special.search.commonsInterwikiWidget", "5zvgb", [68, 41]], ["mediawiki.special.search.interwikiwidget.styles", "16fgf"], ["mediawiki.special.search.styles", "3xdaq"], ["mediawiki.special.userlogin.common.styles", "1bm7h"], ["mediawiki.legacy.shared", "1uvrl"], ["mediawiki.ui", "1utf0"], ["mediawiki.ui.checkbox", "15yy1"], ["mediawiki.ui.radio", "1pfrq"], [
            "mediawiki.ui.anchor", "c9pu1"], ["mediawiki.ui.button", "10y2f"], ["mediawiki.ui.input", "18jsb"], ["mediawiki.ui.icon", "1pq9s"], ["mediawiki.widgets", "1r40d", [41, 130, 161, 171]], ["mediawiki.widgets.styles", "1kqtv"], ["mediawiki.widgets.AbandonEditDialog", "62nq2", [166]], ["mediawiki.widgets.DateInputWidget", "17wo9", [133, 31, 161, 182]], ["mediawiki.widgets.DateInputWidget.styles", "sdb9r"], ["mediawiki.widgets.visibleLengthLimit", "uj2nl", [21, 158]], ["mediawiki.widgets.datetime", "1q103", [70, 158, 177, 181, 182]], ["mediawiki.widgets.expiry", "1xp7z", [135, 31, 161]], ["mediawiki.widgets.CheckMatrixWidget", "bbszi", [158]], ["mediawiki.widgets.CategoryMultiselectWidget", "fr599", [47, 161]], ["mediawiki.widgets.SelectWithInputWidget", "yjlkr", [140, 161]], ["mediawiki.widgets.SelectWithInputWidget.styles", "4wtw6"], ["mediawiki.widgets.SizeFilterWidget", "1ht3s", [142, 161]], ["mediawiki.widgets.SizeFilterWidget.styles", "b3yqn"], ["mediawiki.widgets.MediaSearch", "18dlo", [47, 161]], ["mediawiki.widgets.Table", "1vxru", [161]], [
            "mediawiki.widgets.TagMultiselectWidget", "1mwuq", [161]], ["mediawiki.widgets.UserInputWidget", "1555z", [41, 161]], ["mediawiki.widgets.UsersMultiselectWidget", "1h6xp", [41, 161]], ["mediawiki.widgets.NamespacesMultiselectWidget", "jiviu", [161]], ["mediawiki.widgets.TitlesMultiselectWidget", "593ki", [129]], ["mediawiki.widgets.SearchInputWidget", "haq07", [63, 129, 177]], ["mediawiki.widgets.SearchInputWidget.styles", "176ja"], ["mediawiki.watchstar.widgets", "ex74u", [157]], ["mediawiki.deflate", "glf6m"], ["oojs", "1ch6v"], ["mediawiki.router", "ajk4o", [156]], ["oojs-router", "3j2x4", [154]], ["oojs-ui", "1gvrd", [164, 161, 166]], ["oojs-ui-core", "col9e", [86, 154, 160, 159, 168]], ["oojs-ui-core.styles", "1q64c"], ["oojs-ui-core.icons", "syp9o"], ["oojs-ui-widgets", "u0bq4", [158, 163]], ["oojs-ui-widgets.styles", "15b57"], ["oojs-ui-widgets.icons", "1u1fs"], ["oojs-ui-toolbars", "1t2w1", [158, 165]], ["oojs-ui-toolbars.icons", "17j2v"], ["oojs-ui-windows", "c21fr", [158, 167]], ["oojs-ui-windows.icons", "749bs"], ["oojs-ui.styles.indicators",
            "15j7u"], ["oojs-ui.styles.icons-accessibility", "1y0ni"], ["oojs-ui.styles.icons-alerts", "15rms"], ["oojs-ui.styles.icons-content", "ofjpy"], ["oojs-ui.styles.icons-editing-advanced", "1c8mg"], ["oojs-ui.styles.icons-editing-citation", "x7vmr"], ["oojs-ui.styles.icons-editing-core", "teg9z"], ["oojs-ui.styles.icons-editing-list", "15qxw"], ["oojs-ui.styles.icons-editing-styling", "1horl"], ["oojs-ui.styles.icons-interactions", "o5qof"], ["oojs-ui.styles.icons-layout", "8q3b4"], ["oojs-ui.styles.icons-location", "dlk4b"], ["oojs-ui.styles.icons-media", "15cut"], ["oojs-ui.styles.icons-moderation", "1kxpc"], ["oojs-ui.styles.icons-movement", "1h53g"], ["oojs-ui.styles.icons-user", "1717s"], ["oojs-ui.styles.icons-wikimedia", "m9igr"], ["skins.vector.user", "1xvcb", [], 0], ["skins.vector.user.styles", "1gxes", [], 0], ["skins.vector.styles.legacy", "17fc1"], ["skins.vector.styles", "1mg11"], ["skins.vector.icons.js", "1wemv"], ["skins.vector.icons", "zhknd"], ["skins.monobook.styles", "1uri2"], ["skins.monobook.scripts", "glb5a", [69, 170
            ]], ["skins.modern", "yl0fn"], ["skins.cologneblue", "1n1s6"], ["skins.timeless", "16zsj"], ["skins.timeless.js", "poasm"], ["ext.timeline.styles", "poumc"], ["ext.wikihiero.visualEditor", "d1kzb", [293]], ["ext.cite.styles", "17mnd"], ["ext.cite.style", "yx4l1"], ["ext.cite.visualEditor.core", "1aq9b", [300]], ["ext.cite.visualEditor", "1x3m0", [200, 199, 201, 170, 173, 177]], ["ext.inputBox.styles", "1f4og"], ["ext.pygments", "1u9pi"], ["ext.pygments.linenumbers", "zyy6j"], ["ext.geshi.visualEditor", "16uth", [293]], ["ext.flaggedRevs.basic", "1y34d"], ["ext.flaggedRevs.icons", "bnmll"], ["ext.categoryTree", "12fll", [41]], ["ext.categoryTree.styles", "1ho9u"], ["ext.spamBlacklist.visualEditor", "ovffn"], ["mediawiki.api.titleblacklist", "6nhct", [41]], ["ext.titleblacklist.visualEditor", "1taqb"], ["ext.tmh.video-js", "1xn38"], ["ext.tmh.videojs-ogvjs", "r5nu3", [222, 214]], ["ext.tmh.player", "1au1o", [221, 219, 65]], ["ext.tmh.player.dialog", "bt0x9", [218, 166]], ["ext.tmh.player.inline", "1ql9o", [214, 65]], ["ext.tmh.player.styles", "1r2p1"], [
            "ext.tmh.thumbnail.styles", "hrhb9"], ["ext.tmh.OgvJsSupport", "rtc8b"], ["ext.tmh.OgvJs", "dee9x", [221]], ["embedPlayerIframeStyle", "2hl6r"], ["ext.urlShortener.special", "cyon8", [68, 52, 129, 157]], ["ext.score.visualEditor", "1nbku", [226, 293]], ["ext.score.visualEditor.icons", "z0gpb"], ["ext.cirrus.serp", "6fxwx", [68, 155]], ["ext.confirmEdit.visualEditor", "dqe95", [516]], ["ext.confirmEdit.fancyCaptcha.styles", "72m4m"], ["ext.confirmEdit.fancyCaptcha", "1dz3b", [41]], ["ext.confirmEdit.fancyCaptchaMobile", "1dz3b", [330]], ["ext.centralauth.centralautologin", "qq0sf", [89]], ["ext.centralauth.centralautologin.clearcookie", "1kb7x"], ["ext.centralauth.ForeignApi", "1tkmh", [48]], ["ext.widgets.GlobalUserInputWidget", "tw2pv", [41, 161]], ["ext.dismissableSiteNotice", "1tqui", [18, 70]], ["ext.dismissableSiteNotice.styles", "1psm7"], ["ext.centralNotice.startUp", "1ptwd", [240]], ["ext.centralNotice.geoIP", "spv2q", [18]], ["ext.centralNotice.choiceData", "1pb90", [244, 243, 245, 246]], ["ext.centralNotice.display", "up6v4", [239, 242, 404, 68,
                64]], ["ext.centralNotice.kvStore", "yqh2i"], ["ext.centralNotice.bannerHistoryLogger", "qedmi", [241]], ["ext.centralNotice.impressionDiet", "n5zrg", [241]], ["ext.centralNotice.largeBannerLimit", "p2grr", [241]], ["ext.centralNotice.legacySupport", "1kh3o", [241]], ["ext.centralNotice.bannerSequence", "q58r6", [241]], ["ext.centralNotice.freegeoipLookup", "1ab6b", [239]], ["ext.centralNotice.impressionEventsSampleRate", "1kg37", [241]], ["ext.collection.bookcreator.messageBox.icons", "13aui"], ["ext.ElectronPdfService.special.selectionImages", "1bv7a"], ["ext.advancedSearch.searchtoken", "1vhat", [], 1], ["ext.abuseFilter.visualEditor", "148wm"], ["ext.wikiEditor.images", "uohz8"], ["ext.betaFeatures", "1dfn3", [16, 158]], ["ext.betaFeatures.styles", "8xj2r"], ["ext.popups.icons", "fz5g4"], ["ext.popups.images", "gjhza"], ["ext.popups", "j5ccd"], ["ext.popups.main", "1g4c6", [257, 258, 68, 74, 64, 126, 123, 128, 69]], ["socket.io", "fcmug"], ["dompurify", "cw5fe"], ["color-picker", "1hxf4"], ["unicodejs", "alrva"], ["papaparse", "5tm70"], ["rangefix",
            "ekvqx"], ["spark-md5", "1uk2w"], ["ext.visualEditor.supportCheck", "hzrm9", [], 3], ["ext.visualEditor.sanitize", "1snr7", [262, 282], 3], ["ext.visualEditor.progressBarWidget", "1ns9r", [], 3], ["ext.visualEditor.tempWikitextEditorWidget", "151cl", [75, 69], 3], ["ext.visualEditor.targetLoader", "1xdax", [281, 279, 28, 68, 64, 69], 3], ["ext.visualEditor.mobileArticleTarget", "17ruo", [285, 290], 3], ["ext.visualEditor.collabTarget", "1paqc", [283, 289, 75, 129, 177, 178], 3], ["ext.visualEditor.collabTarget.mobile", "1b0rg", [274, 290, 294], 3], ["ext.visualEditor.collabTarget.init", "1sgot", [268, 129, 157], 3], ["ext.visualEditor.collabTarget.init.styles", "18e9s"], ["ext.visualEditor.ve", "1mbx1", [], 3], ["ext.visualEditor.track", "1lfjv", [278], 3], ["ext.visualEditor.core.utils", "fkgtc", [279, 157], 3], ["ext.visualEditor.core.utils.parsing", "1584k", [278], 3], ["ext.visualEditor.base", "51brd", [280, 281, 264], 3], ["ext.visualEditor.mediawiki", "1ytcn", [282, 272, 26, 422], 3], ["ext.visualEditor.mwsave", "64iei", [293, 21, 23, 44, 177], 3], [
            "ext.visualEditor.articleTarget", "1er0q", [294, 284, 131], 3], ["ext.visualEditor.data", "1li8v", [283]], ["ext.visualEditor.core", "1gh2l", [269, 268, 16, 265, 266, 267], 3], ["ext.visualEditor.commentAnnotation", "vvma3", [287], 3], ["ext.visualEditor.rebase", "7l1o6", [263, 303, 288, 183, 261], 3], ["ext.visualEditor.core.mobile", "1n95t", [287], 3], ["ext.visualEditor.welcome", "k180i", [157], 3], ["ext.visualEditor.switching", "136a5", [41, 157, 169, 172, 174], 3], ["ext.visualEditor.mwcore", "v4r66", [304, 283, 292, 291, 100, 62, 9, 129], 3], ["ext.visualEditor.mwextensions", "1gvrd", [286, 315, 308, 310, 295, 312, 297, 309, 298, 300], 3], ["ext.visualEditor.mwformatting", "4vxa2", [293], 3], ["ext.visualEditor.mwimage.core", "1wd1t", [293], 3], ["ext.visualEditor.mwimage", "15c4d", [296, 143, 31, 180, 184], 3], ["ext.visualEditor.mwlink", "vptn9", [293], 3], ["ext.visualEditor.mwmeta", "pvgck", [298, 83], 3], ["ext.visualEditor.mwtransclusion", "qrpy3", [293, 146], 3], ["treeDiffer", "ylkzm"], ["diffMatchPatch", "1f0tq"], ["ext.visualEditor.checkList", "17b0s", [287], 3], [
            "ext.visualEditor.diffing", "1qcbz", [302, 287, 301], 3], ["ext.visualEditor.diffPage.init.styles", "x96pz"], ["ext.visualEditor.diffLoader", "1un0a", [272], 3], ["ext.visualEditor.diffPage.init", "1adaq", [306, 157, 169, 172], 3], ["ext.visualEditor.language", "5blra", [287, 422, 91], 3], ["ext.visualEditor.mwlanguage", "1ucrg", [287], 3], ["ext.visualEditor.mwalienextension", "1i211", [293], 3], ["ext.visualEditor.mwwikitext", "1x4i7", [298, 75], 3], ["ext.visualEditor.mwgallery", "9vuvx", [293, 94, 143, 180], 3], ["ext.visualEditor.mwsignature", "18e03", [300], 3], ["ext.visualEditor.experimental", "1gvrd", [], 3], ["ext.visualEditor.icons", "1gvrd", [316, 317, 170, 171, 172, 174, 175, 176, 177, 178, 181, 182, 183, 168], 3], ["ext.visualEditor.moduleIcons", "1vlq4"], ["ext.visualEditor.moduleIndicators", "1ikdv"], ["ext.citoid.visualEditor", "eol1g", [202, 319]], ["ext.citoid.visualEditor.data", "1883r", [283]], ["ext.templateData.images", "210eq"], ["mobile.pagelist.styles", "fig1g"], ["mobile.pagesummary.styles", "vgkev"], ["mobile.placeholder.images", "1v6st"], [
            "mobile.userpage.styles", "1o6ra"], ["mobile.startup.images", "bnmqf"], ["mobile.init.styles", "1hu3b"], ["mobile.init", "1i0x9", [68, 330]], ["mobile.ooui.icons", "1xswl"], ["mobile.user.icons", "1desg"], ["mobile.startup", "umykm", [96, 155, 64, 39, 126, 128, 69, 328, 321, 322, 323, 325]], ["mobile.editor.overlay", "1tsk8", [43, 75, 57, 127, 131, 332, 330, 329, 157, 174]], ["mobile.editor.images", "p8cp2"], ["mobile.talk.overlays", "qmlkt", [125, 331]], ["mobile.mediaViewer", "10few", [330]], ["mobile.languages.structured", "6dn1n", [330]], ["mobile.site", "1gvrd", [0]], ["mobile.site.styles", "1gvrd", [1]], ["mobile.special.styles", "5bzj9"], ["mobile.special.watchlist.scripts", "fqfxf", [330]], ["mobile.special.mobileoptions.styles", "1q28a"], ["mobile.special.mobileoptions.scripts", "wh13m", [330]], ["mobile.special.nearby.styles", "1uzsm"], ["mobile.special.userlogin.scripts", "1rm8n"], ["mobile.special.nearby.scripts", "4rqmw", [68, 342, 330]], ["mobile.special.history.styles", "1nmxd"], ["mobile.special.pagefeed.styles", "2ecap"], [
            "mobile.special.mobilediff.images", "19ng2"], ["mobile.special.mobilediff.styles", "1vr69"], ["skins.minerva.base.styles", "k6jkr"], ["skins.minerva.content.styles.images", "5lbf8"], ["skins.minerva.icons.loggedin", "1vzyc"], ["skins.minerva.amc.styles", "m8muw"], ["skins.minerva.overflow.icons", "amceo"], ["skins.minerva.icons.wikimedia", "rpqbm"], ["skins.minerva.icons.images.scripts.misc", "qo9fr"], ["skins.minerva.icons.page.issues.uncolored", "2atoc"], ["skins.minerva.icons.page.issues.default.color", "l2cks"], ["skins.minerva.icons.page.issues.medium.color", "1l2su"], ["skins.minerva.mainPage.styles", "1lf3z"], ["skins.minerva.userpage.styles", "ml320"], ["skins.minerva.talk.styles", "1u1pe"], ["skins.minerva.personalMenu.icons", "1syfn"], ["skins.minerva.mainMenu.advanced.icons", "1km1b"], ["skins.minerva.mainMenu.icons", "1tiuh"], ["skins.minerva.mainMenu.styles", "1lt7r"], ["skins.minerva.loggedin.styles", "1gdzj"], ["skins.minerva.scripts", "1f8k1", [68, 74, 125, 330, 355, 357, 358, 356, 364, 365, 368]], [
            "skins.minerva.messageBox.styles", "1v2dt"], ["skins.minerva.categories.styles", "1j2ys"], ["ext.math.styles", "1v9c1"], ["ext.math.visualEditor", "12uvp", [370, 293]], ["ext.math.visualEditor.mathSymbolsData", "ltjso", [371]], ["ext.math.visualEditor.chemSymbolsData", "ar9ku", [371]], ["ext.babel", "16oqx"], ["ext.echo.logger", "18jip", [69, 154]], ["ext.echo.ui", "1mry6", [377, 375, 513, 161, 170, 171, 177, 181, 182, 183]], ["ext.echo.dm", "1bfmy", [380, 31]], ["ext.echo.api", "wqab8", [47]], ["ext.echo.mobile", "6zyho", [376, 155, 39]], ["ext.echo.init", "1u3o0", [378]], ["ext.echo.styles.badge", "wa3ok"], ["ext.echo.styles.notifications", "16fds"], ["ext.echo.styles.alert", "dce45"], ["ext.echo.special", "18ug0", [385, 376]], ["ext.echo.styles.special", "1djtg"], ["ext.thanks.images", "t756z"], ["ext.thanks.mobilediff", "15xmd", [386, 330]], ["ext.disambiguator.visualEditor", "aqsjf", [299]], ["ext.discussionTools.init.styles", "1du29"], ["ext.discussionTools.init", "1bw4z", [389, 281, 64, 69, 31, 166, 266, 14]], ["ext.discussionTools.debug", "dqy0n", [390]], [
            "ext.discussionTools.ReplyWidget", "18mvp", [516, 390, 131, 134, 161]], ["ext.discussionTools.ReplyWidgetPlain", "bal4k", [392, 292, 75]], ["ext.discussionTools.ReplyWidgetVisual", "rfxv9", [392, 285, 313, 311]], ["ext.codeEditor.icons", "price"], ["ext.relatedArticles.styles", "r8pu3"], ["ext.relatedArticles.cards", "1ehf8", [398, 70, 154]], ["ext.relatedArticles.lib", "1hns8"], ["ext.relatedArticles.readMore.gateway", "1so6y", [154]], ["ext.relatedArticles.readMore.bootstrap", "1tvlr", [399, 68, 74, 69]], ["ext.relatedArticles.readMore", "knd6f", [397]], ["ext.RevisionSlider.dialogImages", "1sx1n"], ["ext.TwoColConflict.Split.TourImages", "95fo0"], ["ext.eventLogging", "grbb3", [69]], ["ext.eventLogging.debug", "aryjb"], ["ext.wikimediaEvents", "3hjv3", [404, 68, 74, 64, 76]], ["ext.wikimediaEvents.wikibase", "8bkyv", [404, 74]], ["ext.navigationTiming", "1w6gk", [404]], ["ext.uls.common", "1ukz5", [422, 64, 69]], ["ext.uls.i18n", "37yzm", [20, 70]], ["ext.uls.interface", "fkhpx", [418, 161, 177]], ["ext.uls.interlanguage", "1ylyh"], ["ext.uls.languagenames",
            "1irvf"], ["ext.uls.mediawiki", "joiy0", [409, 413, 415, 418, 421]], ["ext.uls.messages", "2ogp6", [410]], ["ext.uls.preferences", "w4ber", [64, 69]], ["ext.uls.pt", "oavu8"], ["ext.uls.webfonts", "yefw5", [416]], ["ext.uls.webfonts.mobile", "126xp", [420]], ["ext.uls.webfonts.repository", "llohn"], ["jquery.uls", "1v3z2", [20, 422, 423]], ["jquery.uls.data", "p81me"], ["jquery.uls.grid", "cnek2"], ["ext.cx.model", "1crl5"], ["ext.cx.icons", "19xaq"], ["ext.cx.dashboard", "kbdo3", [438, 25, 129, 31, 431, 441, 432, 172, 174, 180, 181]], ["sx.publishing.followup", "fegq1", [431, 430, 32]], ["mw.cx3", "d9wqt", [431, 430]], ["mw.cx3.ve", "51cjq", [202, 273]], ["mw.cx.util", "11sfj", [424, 69]], ["mw.cx.SiteMapper", "1398w", [424, 47, 69]], ["mw.cx.ui.LanguageFilter", "10318", [414, 126, 440, 430, 177]], ["ext.cx.stats", "1x65f", [434, 439, 438, 422, 31, 431]], ["chart.js", "1ww4v"], ["ext.cx.entrypoints.recenttranslation", "lpwdh", [422, 431, 430, 32]], ["ext.cx.entrypoints.languagesearcher.init", "1y3oe"], ["ext.cx.entrypoints.languagesearcher", "c87mt", [422, 431]], [
            "ext.cx.widgets.spinner", "1xsme", [424]], ["ext.cx.widgets.callout", "72taa"], ["mw.cx.ui", "gw1gp", [424, 157]], ["mw.cx.ui.Infobar", "19i0l", [440, 430, 170, 177]], ["mw.cx.ui.CaptchaDialog", "qjf1d", [515, 440]], ["mw.cx.ui.LoginDialog", "1nnmd", [70, 440]], ["mw.cx.ui.FeatureDiscoveryWidget", "16kth", [62, 440]], ["mw.cx.skin", "1qxh2"], ["mw.externalguidance.init", "dv4dr", [68]], ["mw.externalguidance", "d6byo", [47, 330, 448, 174]], ["mw.externalguidance.icons", "q70sq"], ["mw.externalguidance.special", "1exqa", [422, 47, 124, 330, 448]], ["ext.wikimediaBadges", "1stt8"], ["ext.graph.styles", "ghik1"], ["ext.graph.data", "lnpu6"], ["ext.graph.loader", "1rnlv", [41]], ["ext.graph.vega1", "8dzub", [452, 68]], ["ext.graph.vega2", "gs3ws", [452, 68]], ["ext.graph.visualEditor", "1072e", [452, 296, 144]], ["ext.oath.totp.showqrcode", "b22bu"], ["ext.oath.totp.showqrcode.styles", "5iqin"], ["ext.ores.highlighter", "5907c"], ["ext.ores.styles", "1ltne"], ["ext.kartographer", "5d704"], ["ext.kartographer.style", "1uxi3"], ["ext.kartographer.site", "1n5nk"], ["mapbox"
            , "1spcu"], ["leaflet.draw", "997vt", [464]], ["ext.kartographer.link", "91kes", [468, 155]], ["ext.kartographer.box", "1bhs1", [469, 480, 463, 462, 472, 68, 41, 180]], ["ext.kartographer.linkbox", "6et9q", [472]], ["ext.kartographer.data", "1jj2n"], ["ext.kartographer.dialog", "gscu7", [464, 155, 161, 166, 177]], ["ext.kartographer.dialog.sidebar", "14t0l", [64, 177, 182]], ["ext.kartographer.util", "1d9jl", [461]], ["ext.kartographer.frame", "zg7jg", [467, 155]], ["ext.kartographer.staticframe", "1n23r", [468, 155, 180]], ["ext.kartographer.preview", "y6o47"], ["ext.kartographer.editing", "dox2g", [41]], ["ext.kartographer.editor", "1gvrd", [467, 465]], ["ext.kartographer.visualEditor", "75vxo", [472, 293, 179]], ["ext.kartographer.lib.prunecluster", "1mdne", [464]], ["ext.kartographer.lib.topojson", "1em2u", [464]], ["ext.kartographer.wv", "gfgjl", [479, 174]], ["ext.kartographer.specialMap", "19ibl"], ["ext.growthExperiments.mobileMenu.icons", "1cppr"], ["ext.growthExperiments.SuggestedEditSession", "vowpr", [68, 64, 69, 154]], [
            "ext.growthExperiments.HelpPanelCta.styles", "1ofef"], ["ext.growthExperiments.HomepageDiscovery.styles", "iaxdq"], ["ext.growthExperiments.HomepageDiscovery", "uzc8p"], ["ext.growthExperiments.Homepage.mobile", "1p3dr", [502, 161]], ["ext.growthExperiments.Homepage", "pef5u", [68, 69, 166]], ["ext.growthExperiments.Homepage.Mentorship", "vxh9e", [496, 484, 155]], ["ext.growthExperiments.Homepage.SuggestedEdits", "tkgl6", [484, 62, 155, 161, 166, 171, 174, 180]], ["ext.growthExperiments.Homepage.styles", "1vu57"], ["ext.growthExperiments.StructuredTask", "17t9z", [495, 502, 298, 155, 180, 181, 182]], ["ext.growthExperiments.StructuredTask.mobile", "p47zw", [493, 273]], ["ext.growthExperiments.StructuredTask.PreEdit", "92frp", [484, 161, 166]], ["ext.growthExperiments.Help", "glevt", [502, 68, 64, 69, 161, 166, 170, 172, 173, 174, 177, 183]], ["ext.growthExperiments.HelpPanel", "1bbki", [496, 485, 495, 62, 182]], ["ext.growthExperiments.HelpPanel.init", "1nbnx", [484]], ["ext.growthExperiments.PostEdit", "18o0s", [484, 502, 166, 180]], [
            "ext.growthExperiments.Account", "9aaij", [155, 161]], ["ext.growthExperiments.Account.styles", "hhhc2"], ["ext.growthExperiments.icons", "m9ttc"], ["ext.growthExperiments.MentorDashboard", "hcwjr", [502, 146, 166, 173, 174, 177, 180, 181, 182, 183]], ["ext.growthExperiments.MentorDashboard.styles", "1s6ry"], ["mw.config.values.wbRepo", "18lj4"], ["ext.gadget.confirmationRollback-mobile", "f962s", [70], 2], ["ext.gadget.switcher", "vxv62", [], 2], ["ext.gadget.dark-mode-toggle", "12u38", [41, 68, 64, 12], 2], ["ext.gadget.MobileMaps", "r75d2", [], 2], ["ext.gadget.dark-mode", "cfay9", [], 2], ["mobile.editor.ve", "rfpnf", [273, 331]], ["ext.echo.emailicons", "52rjn"], ["ext.echo.secondaryicons", "yhtjd"], ["ext.wikimediaEvents.visualEditor", "7jlvn", [272]], ["mw.cx.externalmessages", "r1moo"], ["ext.confirmEdit.CaptchaInputWidget", "1qawk", [158]], ["ext.globalCssJs.user", "1son6", [], 0, "metawiki"], ["ext.globalCssJs.user.styles", "1son6", [], 0, "metawiki"], ["mediawiki.messagePoster", "gdbf7", [47]]]); mw.config.set(window.RLCONF || {}); mw.loader.state(
                window.RLSTATE || {}); mw.loader.load(window.RLPAGEMODULES || []); queue = window.RLQ || []; RLQ = []; RLQ.push = function (fn) { if (typeof fn === 'function') { fn(); } else { RLQ[RLQ.length] = fn; } }; while (queue[0]) { RLQ.push(queue.shift()); } NORLQ = { push: function () { } };
    }());
}
